snippet log "console.log()" A
console.log(${1:"${2:What?}: " +}${VISUAL}$3);$0
endsnippet

snippet tert "tertiary operator"
let ${1:variable} = ${2:condition} ? ${3:true} : ${4:false};
$0
endsnippet

snippet dir "console.dir()"
console.dir(${1:"${2:What?}: " +}${VISUAL}$3);$0
endsnippet

snippet func "insert a funtion" i
function ${1:Name}(${2:Parameters}){
	${VISUAL}$3
}
$0
endsnippet

snippet varrow "arrow function to variable"
let ${1:variable} = (${2:params}) =>{
	$3
};
$0
endsnippet

snippet funcai "automatically invoked function"
(function () {
	$1
});
$0
endsnippet

snippet funcv "var x = function()"
let ${1:variable}  = function ${2:Name}(${3:Parameters}){
	${VISUAL}$4
};
$0
endsnippet

snippet tout "timeout function" 
setTimeout(${VISUAL}${1:callback()}, ${2:ms});
$0
endsnippet

snippet ajax "Sets up an ajax request" 
$.ajax({
    type : "${1:GET}",
    url : "$2",
    dataType : "${3:json}",
    success: function (data){
		$0
}});
endsnippet

snippet ajaxv "Sets up an ajax request" 
let ${1:variable} = $.ajax({
	type : "${1:GET}",
	url : "$2",
	dataType : "${3:json}",
	success: function (data){
		$0
}});
endsnippet

snippet error "error:function()" 
error : function(${1:data}){
	$2
},
$0
endsnippet

snippet $ "$('')."
$('${1:#selector}').$0
endsnippet

snippet getval "grabs a $().val() to a variable" A
${1:let }${2:varName} = $('${3:#selector}').val();$0
endsnippet

snippet setel "let varName = $('.varNamevarName').className('', function(params){work});"  A
${1:let }${2:varName} = $('${3:#selector}')${4:.${5:className}(${6:'$7',}${8:function(${9:params}){
${10:work}
}})};
$0
endsnippet

snippet getel "$('.').className('', function(params){work});" A
$('${2:#selector}')${3:.${4:className}(${5:'$6'}, ${7:function(${8:params}){
${9:...code...}
}})};
$0
endsnippet

snippet setval "sets a value for $().val = variableName" A
$('${1:.}$2').val = ${2:variableName};$0
endsnippet

snippet if "if" A
if(${1:condition}){
	${VISUAL}$3
}
$0
endsnippet

snippet el "else" i
else{
	${VISUAL}$1
}
$0
endsnippet

snippet elif "else if (condition){}" i
else if(${1:condition}){
	${VISUAL}$2
}
$0
endsnippet

snippet for "for cycle" 
for(${1:let} ${2:i}=${3:0};$2 ${4:<} ${5:collection} ;$2${6:++}){
	${VISUAL}$7
}
$0
endsnippet

snippet forin "for cycle" 
for(${1:variable} in  ${2:collection}){
	${VISUAL}$1
}
$0
endsnippet

snippet wh "while loop" 
while(${1:condition}){
	${VISUAL}$1
}
$0
endsnippet

snippet sw "switch" 
switch(${1:variable}){
	case ${2:Condition}:
		$3
		${4:break;}
	$5}
$0
endsnippet

snippet r "return"
return ${VISUAL}$1;$0
endsnippet

snippet cs "case" 
case ${1:Condition}:
	$2
	${3:break;}
$4}
$0
endsnippet


snippet exp "module.exports.$1 = $2;"
module.exports.${1:asPublic} = ${2:moduleElement};
endsnippet

snippet rreq "const $0 = require('$2');" b
const ${1:obj} = require('$1');$0
endsnippet

snippet constr "constructor function" i
constructor(${1:args}){
$0
}
endsnippet

snippet callb "callback" i
(${1:err,data}) => {
${VISUAL}$0
}
endsnippet

snippet texthtml "Content-type:..." i
{'Content-type':'text/html'}$0
endsnippet

snippet json "json {}" i
.json({
	$0
});
endsnippet

snippet try "try catch" i
try{
	$1
}catch(${2:Exception}){
	$3
}
$0
endsnippet

snippet onload "onload"
$(document).ready(function() {
	${VISUAL}
});
endsnippet

snippet cont "continue"
continue;
$0
endsnippet

snippet bk "break"
break;
$0
endsnippet
