snippet pfunc
public function ${1:name}(${2:args}){
	//$3

	$0
}
endsnippet

snippet array "[ => ]"
$${1:array} = [
	$2 => $3,
	$4 => $5,
	$6 => $7,
	$8 => $9
];
endsnippet

snippet tert "tertiary operator"
$${1:variable} = ${2:expression} ? ${3:true} : ${4:false};$0
endsnippet

snippet key "['key']"
["${1:key}"]$0
endsnippet

snippet func
function ${1:name}(${2:args}){
	//$3

	$0
}
endsnippet

snippet sw "while cycle"
switch($${1:value}){
	case "${2:label}":
		$3
		${4:break;}
	$0}
endsnippet

snippet bk "break"
break;
endsnippet

snippet cls "class"
class ${1:Class Name}
endsnippet

snippet prot "protected"
protected $0
endsnippet

snippet r "return"
return $0
endsnippet

snippet pv "private"
private 
endsnippet

snippet cs "case"
case "${1:label}":
	$2
	${3:break;}
$0
endsnippet

snippet for "for cycle"
for($${1:i}=${2:0};$$1 ${3:<} ${4:collection};$$1${5:++}){
$0
}
endsnippet

snippet forin "for cycle"
for($${1:array} in $${2:value}){
$0
}
endsnippet

snippet forkv "for $key => $value"
for($${1:array} as $${2:key} => $${3:value}){
$0
}
endsnippet

snippet feach "for i as x"
for($${1:array} as $${2:value}){
$0
}
endsnippet

snippet htmlcs
<!-- $0
endsnippet

snippet htmlce
--> $0
endsnippet

snippet if
if(${1:condition}){
$2
}
$0
endsnippet

snippet elif
elseif(${1:condition}){
$2
}
$0
endsnippet

snippet el "else clause" i
else{
	$0
}
endsnippet

snippet loadview
$this->load->view('$1');
endsnippet

snippet loadmodel
$this->load->model('$1');
endsnippet


snippet loadlibrary
$this->load->library('$1');
endsnippet

snippet bold "<b></b>" i
<b>$1</b>$0
endsnippet

snippet log "console.log()"
console.log($0);
endsnippet

snippet para "<p></p>" i
<p>$1</p>$0
endsnippet

snippet php "open tags" w
<?php
$0
?>
endsnippet

snippet baseurl "<?= baseurl ?>" i
<?= base_url(); ?>$0
endsnippet

snippet link
<a href="$1">$2</a>
endsnippet

snippet constr "enter constructor"
function __construct(){
	parent::__construct();
	$0
}
endsnippet


snippet eo "echo "
echo $0
endsnippet

snippet sot "<?= ?>" w
<?= $1; ?>
endsnippet


snippet style "style=''" wA
style="$0"
endsnippet

snippet th "$this->" i
$this->$0
endsnippet

snippet dump "var dump" i
var_dump($0);
endsnippet
